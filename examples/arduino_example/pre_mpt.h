/*predefined mpt matrices for explict evaluation*/
#ifndef __PRE_MPT_H__
#define __PRE_MPT_H__
/* Generated on 02-Oct-2020 09:50:23 by MPT @version@ */ 

#include <float.h>

#define NMPT_NR (1)

static double NMPT_A[] = {
-1.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	-1.00000000000000e+00,	1.00000000000000e+00,	
0.00000000000000e+00,	0.00000000000000e+00,	1.00000000000000e+00,	-1.00000000000000e+00,	0.00000000000000e+00,	
0.00000000000000e+00,	-1.00000000000000e+00,	1.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	
1.00000000000000e+00 };

static double NMPT_B[] = {
9.35565800000000e+02,	9.35565800000000e+02,	9.35565800000000e+02,	9.35565800000000e+02,	9.35565800000000e+02,	
9.35565800000000e+02,	9.35565800000000e+02,	9.35565800000000e+02 };

static int NMPT_NC[] = {
8 };


static double NMPT_F[] = {
-1.34993972933324e-02,	3.08127319085652e-03,	3.08127319085652e-03,	-8.07278245503870e-03 };


static double NMPT_G[] = {
-0.00000000000000e+00,	-0.00000000000000e+00 };


static double NMPT_HTB[] = {
-6.74969864666620e-03,	1.54063659542826e-03,	1.54063659542826e-03,	-4.03639122751935e-03 };


static double NMPT_FTB[] = {
0.00000000000000e+00,	0.00000000000000e+00 };


static double NMPT_GTB[] = {
0.00000000000000e+00 };

/* Generated on 02-Oct-2020 09:50:23 by MPT @version@ */ 

#include <float.h>

#define kMPT_NR (3)

static double kMPT_A[] = {
-1.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	-1.00000000000000e+00,	
0.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	-1.00000000000000e+00,	1.00000000000000e+00,	
0.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	1.00000000000000e+00,	0.00000000000000e+00,	
0.00000000000000e+00,	0.00000000000000e+00,	1.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	
2.49999995000000e-01,	0.00000000000000e+00,	0.00000000000000e+00,	-2.49999995000000e-01,	-1.00000000000000e+00,	
0.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	-1.00000000000000e+00,	0.00000000000000e+00,	
0.00000000000000e+00,	0.00000000000000e+00,	-1.00000000000000e+00,	1.00000000000000e+00,	0.00000000000000e+00,	
0.00000000000000e+00,	0.00000000000000e+00,	1.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	
0.00000000000000e+00,	1.00000000000000e+00,	-1.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	
0.00000000000000e+00,	-1.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	
-1.00000000000000e+00,	1.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	
1.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	1.00000000000000e+00,	
0.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	
-1.00000000000000e+00,	-1.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	
-1.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	-1.00000000000000e+00,	
1.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	1.00000000000000e+00,	
0.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	1.00000000000000e+00,	-1.00000000000000e+00,	
0.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	-1.00000000000000e+00,	0.00000000000000e+00,	
0.00000000000000e+00,	0.00000000000000e+00,	-1.00000000000000e+00,	1.00000000000000e+00,	0.00000000000000e+00,	
0.00000000000000e+00,	0.00000000000000e+00,	1.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	
0.00000000000000e+00,	1.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	
0.00000000000000e+00,	0.00000000000000e+00,	1.00000000000000e+00,	-1.00000000000000e+00,	0.00000000000000e+00,	
0.00000000000000e+00,	0.00000000000000e+00,	-1.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	
0.00000000000000e+00,	-1.00000000000000e+00,	1.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	
0.00000000000000e+00,	1.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	
1.00000000000000e+00 };

static double kMPT_B[] = {
9.35565800000000e+02,	9.35565800000000e+02,	9.35565800000000e+02,	9.35565800000000e+02,	9.35565800000000e+02,	
9.35565800000000e+02,	5.00000000000000e+00,	5.00000000000000e+00,	9.35565800000000e+02,	9.35565800000000e+02,	
9.35565800000000e+02,	9.35565800000000e+02,	9.35565800000000e+02,	9.35565800000000e+02,	9.35565800000000e+02,	
9.35565800000000e+02,	9.35565800000000e+02,	9.35565800000000e+02,	9.35565800000000e+02,	9.35565800000000e+02,	
1.00000000000000e+01,	-2.00000004000000e+01,	9.35565800000000e+02,	9.35565800000000e+02,	9.35565800000000e+02,	
9.35565800000000e+02,	9.35565800000000e+02,	9.35565800000000e+02,	9.35565800000000e+02,	9.35565800000000e+02,	
9.35565800000000e+02,	9.35565800000000e+02,	9.35565800000000e+02,	9.35565800000000e+02,	1.00000000000000e+01,	
-2.00000004000000e+01,	9.35565800000000e+02,	9.35565800000000e+02,	9.35565800000000e+02,	9.35565800000000e+02,	
9.35565800000000e+02,	9.35565800000000e+02 };

static int kMPT_NC[] = {
14,	14,	14 };


static double kMPT_F[] = {
-2.49999999500000e-02,	-0.00000000000000e+00,	-0.00000000000000e+00,	-0.00000000000000e+00,	-2.49999999500000e-02,	
-0.00000000000000e+00,	-0.00000000000000e+00,	-0.00000000000000e+00,	-2.49999995000000e-01,	-2.49999999500000e-02,	
-0.00000000000000e+00,	-0.00000000000000e+00,	-0.00000000000000e+00,	-2.49999999500000e-02,	-0.00000000000000e+00,	
-0.00000000000000e+00,	-0.00000000000000e+00,	0.00000000000000e+00,	-2.49999999500000e-02,	-0.00000000000000e+00,	
-0.00000000000000e+00,	-0.00000000000000e+00,	-2.49999999500000e-02,	-0.00000000000000e+00,	-0.00000000000000e+00,	
-0.00000000000000e+00,	0.00000000000000e+00 };


static double kMPT_G[] = {
-0.00000000000000e+00,	-0.00000000000000e+00,	-0.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	
-5.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	5.00000000000000e+00 };


static double kMPT_HTB[] = {
-1.24999999750000e-02,	0.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	-1.24999999750000e-02,	
0.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	-1.24999997500000e-01,	-1.24999999750000e-02,	
0.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	-1.24999999750000e-02,	0.00000000000000e+00,	
0.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	-1.24999999750000e-02,	0.00000000000000e+00,	
0.00000000000000e+00,	0.00000000000000e+00,	-1.24999999750000e-02,	0.00000000000000e+00,	0.00000000000000e+00,	
0.00000000000000e+00,	0.00000000000000e+00 };


static double kMPT_FTB[] = {
0.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	
-5.00000000000000e+00,	0.00000000000000e+00,	0.00000000000000e+00,	5.00000000000000e+00 };


static double kMPT_GTB[] = {
0.00000000000000e+00,	5.00000010000000e+01,	5.00000010000000e+01 };

#endif
